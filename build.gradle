group 'com.tradeix.concord'
version '1.0'

buildscript {
    ext.kotlin_version = '1.1.60'
    ext.corda_release_group = 'net.corda'
    ext.corda_release_version = '3.1-corda'
    ext.corda_gradle_plugins_version = '3.2.1'
    ext.quasar_version = '0.7.9'
    ext.junit_version = '4.12'
    ext.gson_version = '2.8.0'
    ext.spring_boot_version = '1.5.4.RELEASE'
    ext.active_mq_version = "2.2.0"
    ext.jackson_version = "2.9.2"
    ext.guava_version = "21.0"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


sourceSets {
    main.kotlin.srcDirs = []
    main.java.srcDirs = []
    main.resources.srcDirs = []
    test.kotlin.srcDirs = []
    test.java.srcDirs = []
    test.resources.srcDirs = []
}

dependencies {
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    cordapp project(":tradeix-concord-shared")
    cordapp project(":tradeix-concord-shared-domain")
    cordapp project(":tradeix-concord-shared-cordapp")

    cordapp project(":tradeix-concord-cordapp-supplier")
    cordapp project(":tradeix-concord-cordapp-funder")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true
    }
}

def $supplierCorDapp = [
        "$project.group:tradeix-concord-shared:$project.version",
        "$project.group:tradeix-concord-shared-domain:$project.version",
        "$project.group:tradeix-concord-shared-cordapp:$project.version",
        "$project.group:tradeix-concord-cordapp-supplier:$project.version"
]

def $funderCorDapp = [
        "$project.group:tradeix-concord-shared:$project.version",
        "$project.group:tradeix-concord-shared-domain:$project.version",
        "$project.group:tradeix-concord-shared-cordapp:$project.version",
        "$project.group:tradeix-concord-cordapp-funder:$project.version"
]

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10002
    }
    node {
        name "O=Test Supplier 1,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        webPort 10007
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Test Funder 1,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        webPort 10010
        cordapps = $funderCorDapp
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task deployMockNetwork(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/mockNetwork"

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10002
    }

    node {
        name "O=TradeIX Mock Buyer 1, L=Edinburgh, C=GB"
        p2pPort 10010
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost10012")
        }
        webPort 10013
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Buyer 2, L=Nice, C=FR"
        p2pPort 10020
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost10022")
        }
        webPort 10023
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Buyer 3, L=Los Angeles, C=US"
        p2pPort 10030
        rpcSettings {
            address("localhost:10031")
            adminAddress("localhost10032")
        }
        webPort 10033
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Supplier 1, L=London, C=GB"
        p2pPort 10040
        rpcSettings {
            address("localhost:10041")
            adminAddress("localhost10042")
        }
        webPort 10043
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Supplier 2, L=Paris, C=FR"
        p2pPort 10050
        rpcSettings {
            address("localhost:10051")
            adminAddress("localhost10052")
        }
        webPort 10053
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Supplier 3, L=New York, C=US"
        p2pPort 10060
        rpcSettings {
            address("localhost:10061")
            adminAddress("localhost10062")
        }
        webPort 10063
        cordapps = $supplierCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Funder1, L=Madris, C=ES"
        p2pPort 10070
        rpcSettings {
            address("localhost:10071")
            adminAddress("localhost10072")
        }
        webPort 10073
        cordapps = $funderCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Funder2, L=Tokyo, C=JP"
        p2pPort 10080
        rpcSettings {
            address("localhost:10081")
            adminAddress("localhost10082")
        }
        webPort 10083
        cordapps = $funderCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }

    node {
        name "O=TradeIX Mock Funder3, L=Cape Town, C=SA"
        p2pPort 10090
        rpcSettings {
            address("localhost:10091")
            adminAddress("localhost10092")
        }
        webPort 10093
        cordapps = $funderCorDapp
        rpcUsers = [[user: "guest", password: "letmein", permissions: ["ALL"]]]
    }
}

task createDemoBenchProfile(type: Zip, dependsOn: ['deployMockNetwork']) {
    from 'build/mockNetwork'
    archiveName 'demobench-erp.zip'
    destinationDir(file('/build/demobench/'))
}