package com.tradeix.concord.messages.rabbit.invoice

import com.tradeix.concord.flowmodels.invoice.InvoiceAmendmentFlowModel
import com.tradeix.concord.messages.AttachmentMessage
import com.tradeix.concord.messages.SingleIdentityMessage
import com.tradeix.concord.messages.rabbit.RabbitRequestMessage
import com.tradeix.concord.states.InvoiceState
import net.corda.core.identity.CordaX500Name
import java.math.BigDecimal
import java.time.Instant

class InvoiceAmendmentRequestMessage(
        override val correlationId: String? = null,
        override var tryCount: Int = 0,
        override val externalId: String? = null,
        override val attachmentId: String? = null,
        val conductor: CordaX500Name? = CordaX500Name("TradeIX", "London", "GB"),
        val buyer: CordaX500Name? = null,
        val supplier: CordaX500Name? = null,
        val funder: CordaX500Name? = null,
        val invoiceVersion: String? = null,
        val invoiceVersionDate: Instant? = null,
        val tixInvoiceVersion: Int? = null,
        val invoiceNumber: String? = null,
        val invoiceType: String? = null,
        val reference: String? = null,
        val dueDate: Instant? = null,
        val offerId: Int? = null,
        val amount: BigDecimal? = null,
        val totalOutstanding: BigDecimal? = null,
        val created: Instant? = null,
        val updated: Instant? = null,
        val expectedSettlementDate: Instant? = null,
        val settlementDate: Instant? = null,
        val mandatoryReconciliationDate: Instant? = null,
        val invoiceDate: Instant? = null,
        val status: String? = null,
        val rejectionReason: String? = null,
        val eligibleValue: BigDecimal? = null,
        val invoicePurchaseValue: BigDecimal? = null,
        val tradeDate: Instant? = null,
        val tradePaymentDate: Instant? = null,
        val invoicePayments: BigDecimal? = null,
        val invoiceDilutions: BigDecimal? = null,
        val cancelled: Boolean? = null,
        val closeDate: Instant? = null,
        val originationNetwork: String? = null,
        val hash: String? = null,
        val currency: String? = null,
        val siteId: String? = null,
        val purchaseOrderNumber: String? = null,
        val purchaseOrderId: String? = null,
        val composerProgramId: Int? = null
) : RabbitRequestMessage(), SingleIdentityMessage, AttachmentMessage {

    companion object {
        fun fromState(state: InvoiceState): InvoiceAmendmentRequestMessage {
            return InvoiceAmendmentRequestMessage(
                    correlationId = "",
                    tryCount = 0,
                    externalId = state.linearId.externalId.toString(),
                    attachmentId = "",
                    conductor = state.conductor.nameOrNull(),
                    buyer = state.buyer.nameOrNull(),
                    supplier = state.supplier.nameOrNull(),
                    invoiceVersion = state.invoiceVersion,
                    invoiceVersionDate = state.invoiceVersionDate,
                    tixInvoiceVersion = state.tixInvoiceVersion,
                    invoiceNumber = state.invoiceNumber,
                    invoiceType = state.invoiceType,
                    reference = state.reference,
                    dueDate = state.dueDate,
                    offerId = state.offerId,
                    amount = state.amount.toDecimal(),
                    totalOutstanding = state.totalOutstanding.toDecimal(),
                    created = state.created,
                    updated = state.updated,
                    expectedSettlementDate = state.expectedSettlementDate,
                    settlementDate = state.settlementDate,
                    mandatoryReconciliationDate = state.mandatoryReconciliationDate,
                    invoiceDate = state.invoiceDate,
                    status = state.status,
                    rejectionReason = state.rejectionReason,
                    eligibleValue = state.eligibleValue.toDecimal(),
                    invoicePurchaseValue = state.invoicePurchaseValue.toDecimal(),
                    tradeDate = state.tradeDate,
                    tradePaymentDate = state.tradePaymentDate,
                    invoicePayments = state.invoicePayments.toDecimal(),
                    invoiceDilutions = state.invoiceDilutions.toDecimal(),
                    cancelled = state.cancelled,
                    closeDate = state.closeDate,
                    originationNetwork = state.originationNetwork,
                    hash = state.hash,
                    currency = state.currency.toString(),
                    siteId = state.siteId,
                    purchaseOrderNumber = state.purchaseOrderNumber,
                    purchaseOrderId = state.purchaseOrderId,
                    composerProgramId = state.composerProgramId
            )
        }
    }

    fun toModel() = InvoiceAmendmentFlowModel(
            externalId = externalId,
            attachmentId = attachmentId,
            conductor = conductor,
            buyer = buyer,
            supplier = supplier,
            funder = funder,
            invoiceVersion = invoiceVersion,
            invoiceVersionDate = invoiceVersionDate,
            tixInvoiceVersion = tixInvoiceVersion,
            invoiceNumber = invoiceNumber,
            invoiceType = invoiceType,
            reference = reference,
            dueDate = dueDate,
            offerId = offerId,
            amount = amount,
            totalOutstanding = totalOutstanding,
            created = created,
            updated = updated,
            expectedSettlementDate = expectedSettlementDate,
            settlementDate = settlementDate,
            mandatoryReconciliationDate = mandatoryReconciliationDate,
            invoiceDate = invoiceDate,
            status = status,
            rejectionReason = rejectionReason,
            eligibleValue = eligibleValue,
            invoicePurchaseValue = invoicePurchaseValue,
            tradeDate = tradeDate,
            tradePaymentDate = tradePaymentDate,
            invoicePayments = invoicePayments,
            invoiceDilutions = invoiceDilutions,
            cancelled = cancelled,
            closeDate = closeDate,
            originationNetwork = originationNetwork,
            hash = hash,
            currency = currency,
            siteId = siteId,
            purchaseOrderNumber = purchaseOrderNumber,
            purchaseOrderId = purchaseOrderId,
            composerProgramId = composerProgramId
    )
}