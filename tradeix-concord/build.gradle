repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "com.rabbitmq:amqp-client:$rabbit_version"
    compile "com.google.code.gson:gson:$gson_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testCompile "org.mockito:mockito-core:$mockito_core_version"

    // Corda integration dependencies
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-finance:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-webserver-impl:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"
    cordaRuntime "net.corda:corda-webserver:$corda_release_version"

    testCompile "net.corda:corda-node-driver:$corda_release_version"

    // GraphStream: For visualisation (required by ExampleClientRPC app)
    compile "org.graphstream:gs-core:1.3"
    compile("org.graphstream:gs-ui:1.3") {
        exclude group: "bouncycastle"
    }

    // PlantUML: For Generation of Sequence Diagrams of the Flows
    compile 'net.sourceforge.plantuml:plantuml:8039'

    // CorDapp dependencies
    // Specify your cordapp's dependencies below, including dependent cordapps
    cordapp "net.corda:corda-finance:$corda_release_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    networkMap "O=Controller,L=London,C=GB"
    node {
        name "O=Controller,L=London,C=GB"
        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
    }
    node {
        name "O=Commerzbank,L=London,C=GB"
        advertisedServices = []
        p2pPort 10005
        rpcPort 10006
        webPort 10007
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=ING Group,L=Amsterdam,C=NL"
        advertisedServices = []
        p2pPort 10008
        rpcPort 10009
        webPort 10010
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=TradeIX,L=London,C=GB"
        advertisedServices = []
        p2pPort 10011
        rpcPort 10012
        webPort 10013
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=Fake Supplier,L=London,C=GB"
        advertisedServices = []
        p2pPort 10014
        rpcPort 10015
        webPort 10016
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
}

task deployDevNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    networkMap "O=R3Net,L=London,C=GB"
    node { //NOTARY
        name "O=R3Net,L=London,C=GB"
        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
    }
    node { //CONDUCTOR
        name "O=TradeIX,L=London,C=GB"
        advertisedServices = []
        p2pPort 10004
        rpcPort 10005
        webPort 10006
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
   node { //BUYER_1
        name "O=Exxon Mobil,L=Irving,C=US"
        advertisedServices = []
        p2pPort 10007
        rpcPort 10008
        webPort 10009
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node { //SUPPLIER_1
        name "O=Royal Dutch Shell,L=The Hague,C=NL"
        advertisedServices = []
        p2pPort 10010
        rpcPort 10011
        webPort 10012
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node { //SUPPLIER_2
        name "O=Fake Supplier,L=London,C=GB"
        advertisedServices = []
        p2pPort 10013
        rpcPort 10014
        webPort 10015
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node { //FUNDER_1
        name "O=BNY Mellon,L=New York,C=US"
        advertisedServices = []
        p2pPort 10016
        rpcPort 10017
        webPort 10018
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node { //SUPPLIER_3
        name "O=TradeIXTestSupplier1,L=London,C=GB"
        advertisedServices = []
        p2pPort 10019
        rpcPort 10020
        webPort 10021
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node { //SUPPLIER_4
        name "O=TradeIXTestSupplier2,L=London,C=GB"
        advertisedServices = []
        p2pPort 10022
        rpcPort 10023
        webPort 10024
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
}

// TODO: Make into gradle plugins without any references to Jython
task installJythonDeps(dependsOn: ['build']) {
    project.copy {
        from project.configurations.runtime
        into "build/jythonDeps"
    }
}

installJythonDeps.shouldRunAfter build

task generateFlowDiagram(type: JavaExec) {
    classpath = files("build/jythonDeps/plantuml-8039.jar")
    main = "net.sourceforge.plantuml.Run"
    args = [
            "-tsvg",
            "-output", "../kotlin-source/build/doc",
            "-exclude", "inc_*",
            "../doc/*.plantuml"
    ]
}

task runExampleClientRPCKotlin(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.tradeix.concord.clients.ConcordClientRPC'
    args 'localhost:10006'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
